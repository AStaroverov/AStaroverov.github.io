webpackJsonp([2],{27:function(e,s,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(s,"__esModule",{value:!0});var v=t(28),m=n(v);s["default"]={template:m["default"],data:function(){return{source:r}},components:{"vue-test":{template:"<div><slot></slot></div>"}}};var r='\n# Template\n\n<span>$mq.resize {{ $mq.resize }}</span>\n<vue-test v-show="$mq.resize && $mq.notHD()">\n  vue-test v-show="$mq.resize && $mq.notHD()"\n</vue-test>\n<vue-test v-show="$mq.resize && $mq.expr(\'(min-width: 600px)\')">\n  vue-test v-show="$mq.resize && $mq.expr(\'(min-width: 600px)\')"\n</vue-test>\n<vue-test v-show="$mq.resize && $mq.between([$mv.screenXs, 1920])">\n  vue-test v-show="$mq.resize && $mq.between([$mv.screenXs, 1920])"\n</vue-test>\n<vue-test v-show="$mq.resize && $mq.beyond([$mv.screenXs, 1000])">\n  vue-test v-show="$mq.resize && $mq.beyond([$mv.screenXs, 1000])"\n</vue-test>\n<vue-test v-show="$mq.resize && $mq.above($mv.screenXs)">\n  vue-test v-show="$mq.resize && $mq.above($mv.screenXs)"\n</vue-test>\n<vue-test v-show="$mq.resize && $mq.below(1200)">\n  vue-test v-show="$mq.resize && $mq.below(1200)"\n</vue-test>\n\n# Script\n\nimport Vue from \'\'\n\nVue.use(vMediaQuery, {\n  methods: {\n    notHD() {\n      return window.innerWidth !== 1920\n    },\n    itHD() {\n      return window.innerWidth === 1920\n    },\n  },\n  variables: {\n    screenXs: 600,\n    screenHd: 1920\n  }\n});\n\nVue.component(\'vue-test\', {\n  template: \'<div><slot></slot></div>\',\n})\n\n';e.exports=s["default"]},28:function(e,s){e.exports='<div class=mdl-grid> <div class="mdl-cell mdl-card mdl-cell mdl-cell--12-col mdl-shadow--4dp"> <div class=mdl-card__title> <h2 class=mdl-card__title-text>Vue media query.</h2> </div> <div class=mdl-card__supporting-text> <div class=mdl-typography--title>Example</div><br><br> <span>$mq.resize {{ $mq.resize }}</span> <vue-test v-show="$mq.resize && $mq.notHD()"> vue-test v-show="$mq.resize && $mq.notHD()" </vue-test> <vue-test v-show="$mq.resize && $mq.expr(\'(min-width: 600px)\')"> vue-test v-show="$mq.resize && $mq.expr(\'(min-width: 600px)\')" </vue-test> <vue-test v-show="$mq.resize && $mq.between([$mv.screenXs, 1920])"> vue-test v-show="$mq.resize && $mq.between([$mv.screenXs, 1920])" </vue-test> <vue-test v-show="$mq.resize && $mq.beyond([$mv.screenXs, 1000])"> vue-test v-show="$mq.resize && $mq.beyond([$mv.screenXs, 1000])" </vue-test> <vue-test v-show="$mq.resize && $mq.above($mv.screenXs)"> vue-test v-show="$mq.resize && $mq.above($mv.screenXs)" </vue-test> <vue-test v-show="$mq.resize && $mq.below(1200)"> vue-test v-show="$mq.resize && $mq.below(1200)" </vue-test> <br><br> <vue-collapce> <div slot=trigger class=mdl-typography--title>Source</div> <pre slot=content v-text=source></pre> </vue-collapce> </div> </div> </div>'}});